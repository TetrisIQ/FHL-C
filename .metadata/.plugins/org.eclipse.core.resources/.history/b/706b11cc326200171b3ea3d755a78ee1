/*
 * ringbuffer.c
 *
 *  Created on: 02.07.2017
 *      Author: alex
 */

#include "ringbuffer.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct ringbuffer_ {
    size_t size; // Groesse des Puffers
    size_t count; // Anzahl der Elmente im Puffer
    size_t head; // Index des vordersten Elements
    size_t tail; // Index des hintersten Elements
    char* data; // Zeiger auf den Puffer
                // data wird durch malloc auf dem Heap
                // angelegt.
} ringbuffer;

ringbuffer queue;

// zum Initialisieren eines Ringbuffers.
int rbinit(size_t size) {
    queue.size = size;
    queue.count = 0;
    queue.head = 0;
    queue.tail = 0;
    queue.data = malloc(size * sizeof(char));

    return 1;

}
//zum Freigeben des belegten Speicherplatzes
int rbfree() {
    free(queue.data);
    return 1;
}
// zum Hinzufügen eines einzelnen Zeichens am Ende.
int rbput(char e) {
    if (queue.count == queue.size) {
        return 0;
    }
//    queue.tail = inc(queue.tail, queue.size); //tail wird in inc um 1 erweitert
    if (++(queue.tail) == queue.size) {
        queue.tail = 0;
    }
    queue.data[(queue.tail)] = e;
    queue.count++;
    return 1;
}

//zum Herausholen und zurückliefern eines Zeichens vom Anfang.
char rbget() {
    if (tempRing.count == 0) {
        printf("Kein Element in der Warteschlange!");
        return 0;
    }
    char c = *(tempRing.data + tempRing.head);
    *(tempRing.data + tempRing.head) = '\0';
    tempRing.head++;

    if (tempRing.head == tempRing.size) {
        tempRing.head = 0;
    }

    tempRing.count--;
    return c;

    int rbprint() {
        int i;
        char* ret = "";
        for (i = queue.head; i <= queue.tail; i++) {
            ret += queue.data[i];
        }
        printf(ret);

        return 1;
    }
